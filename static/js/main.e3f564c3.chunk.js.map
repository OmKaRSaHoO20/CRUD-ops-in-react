{"version":3,"sources":["components/Read.js","components/Edit.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","phoneNumber","email","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","useState","data","info","setInfo","address","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","Edit","Read","newContact","nanoid","unique","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAwBeA,EAtBK,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,kBAC/C,OACE,+BACE,6BAAKF,EAAQG,WAEb,6BAAKH,EAAQI,cACb,6BAAKJ,EAAQK,QACb,+BACE,wBACEC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAWP,EAAgBO,EAAOR,IAF7C,kBAMA,wBAAQM,KAAK,SAASC,QAAS,kBAAML,EAAkBF,EAAQS,KAA/D,2BC2COC,EAzDK,SAAC,GAId,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,qBACAC,EACI,EADJA,kBAEA,OACE,+BACE,6BACE,uBACEP,KAAK,OACLQ,SAAS,WACTC,YAAY,kBACZC,KAAK,WACLC,MAAON,EAAaR,SACpBe,SAAUN,MAad,6BACE,uBACEN,KAAK,OACLQ,SAAS,WACTC,YAAY,0BACZC,KAAK,cACLC,MAAON,EAAaP,YACpBc,SAAUN,MAGd,6BACE,uBACEN,KAAK,QACLQ,SAAS,WACTC,YAAY,oBACZC,KAAK,QACLC,MAAON,EAAaN,MACpBa,SAAUN,MAGd,+BACE,wBAAQN,KAAK,SAAb,kBACA,wBAAQA,KAAK,SAASC,QAASM,EAA/B,2BCsIOM,EAlLH,WACV,MAAwBC,mBAASC,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCH,mBAAS,CAC7CjB,SAAU,GACVqB,QAAS,GACTpB,YAAa,GACbC,MAAO,KAJT,mBAAOoB,EAAP,KAAoBC,EAApB,KAOA,EAAwCN,mBAAS,CAC/CjB,SAAU,GACVqB,QAAS,GACTpB,YAAa,GACbC,MAAO,KAJT,mBAAOM,EAAP,KAAqBgB,EAArB,KAOA,EAA0CP,mBAAS,MAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KAEMC,EAAsB,SAACtB,GAC3BA,EAAMuB,iBAEN,IAAMC,EAAYxB,EAAMyB,OAAOC,aAAa,QACtCC,EAAa3B,EAAMyB,OAAOhB,MAE1BmB,EAAW,eAAQX,GACzBW,EAAYJ,GAAaG,EAEzBT,EAAeU,IAGXxB,EAAuB,SAACJ,GAC5BA,EAAMuB,iBAEN,IAAMC,EAAYxB,EAAMyB,OAAOC,aAAa,QACtCC,EAAa3B,EAAMyB,OAAOhB,MAE1BmB,EAAW,eAAQzB,GACzByB,EAAYJ,GAAaG,EAEzBR,EAAgBS,IAuCZnC,EAAkB,SAACO,EAAOR,GAC9BQ,EAAMuB,iBACNF,EAAiB7B,EAAQS,IAEzB,IAAM4B,EAAa,CACjBlC,SAAUH,EAAQG,SAClBqB,QAASxB,EAAQwB,QACjBpB,YAAaJ,EAAQI,YACrBC,MAAOL,EAAQK,OAGjBsB,EAAgBU,IAGZxB,EAAoB,WACxBgB,EAAiB,OAGb3B,EAAoB,SAACoC,GACzB,IAAMC,EAAW,YAAOjB,GAElBkB,EAAQlB,EAAKmB,WAAU,SAACzC,GAAD,OAAaA,EAAQS,KAAO6B,KAEzDC,EAAYG,OAAOF,EAAO,GAE1BjB,EAAQgB,IAGV,OACE,sBAAKI,UAAU,gBAAf,UACE,sBAAMC,SAnDmB,SAACpC,GAC5BA,EAAMuB,iBAEN,IAAMc,EAAgB,CACpBpC,GAAImB,EACJzB,SAAUQ,EAAaR,SACvBqB,QAASb,EAAaa,QACtBpB,YAAaO,EAAaP,YAC1BC,MAAOM,EAAaN,OAGhBkC,EAAW,YAAOjB,GAIxBiB,EAFcjB,EAAKmB,WAAU,SAACzC,GAAD,OAAaA,EAAQS,KAAOmB,MAEpCiB,EAErBtB,EAAQgB,GACRV,EAAiB,OAiCf,SACE,kCACE,gCACE,+BACE,sCAEA,8CACA,uCACA,8CAGJ,gCACGP,EAAKwB,KAAI,SAAC9C,GAAD,OACR,cAAC,WAAD,UACG4B,IAAkB5B,EAAQS,GACzB,cAACsC,EAAD,CACEpC,aAAcA,EACdC,qBAAsBA,EACtBC,kBAAmBA,IAGrB,cAACmC,EAAD,CACEhD,QAASA,EACTC,gBAAiBA,EACjBC,kBAAmBA,gBASjC,+CACA,uBAAM0C,SApGkB,SAACpC,GAC3BA,EAAMuB,iBAEN,IAAMkB,EAAa,CACjBxC,GAAIyC,cACJ/C,SAAUsB,EAAYtB,SACtBqB,QAASC,EAAYD,QACrBpB,YAAaqB,EAAYrB,YACzBC,MAAOoB,EAAYpB,OAGfkC,EAAW,sBAAOjB,GAAP,CAAa2B,IAC9B1B,EAAQgB,IAwFN,UACE,uBACEjC,KAAK,OACLU,KAAK,WACLF,SAAS,WACTC,YAAY,kBACZG,SAAUY,IAEZ,uBACExB,KAAK,OACLU,KAAK,UACLF,SAAS,WACTC,YAAY,qBACZG,SAAUY,IAEZ,uBACExB,KAAK,OACLU,KAAK,cACLF,SAAS,WACTqC,OAAS,SACTpC,YAAY,0BACZG,SAAUY,IAEZ,uBACExB,KAAK,QACLU,KAAK,QACLF,SAAS,WACTC,YAAY,oBACZG,SAAUY,IAEZ,wBAAQxB,KAAK,SAAb,wBC/KR8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e3f564c3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\n  return (\n    <tr>\n      <td>{contact.fullName}</td>\n      {/* <td>{contact.address}</td> */}\n      <td>{contact.phoneNumber}</td>\n      <td>{contact.email}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from \"react\";\n\nconst EditableRow = ({\n  editFormData,\n  handleEditFormChange,\n  handleCancelClick,\n}) => {\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          name=\"fullName\"\n          value={editFormData.fullName}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      {/* <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter an address...\"\n          name=\"address\"\n          value={editFormData.address}\n          onChange={handleEditFormChange}\n        ></input>\n      </td> */}\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a phone number...\"\n          name=\"phoneNumber\"\n          value={editFormData.phoneNumber}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          name=\"email\"\n          value={editFormData.email}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <button type=\"submit\">Save</button>\n        <button type=\"button\" onClick={handleCancelClick}>\n          Cancel\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/Read\";\nimport EditableRow from \"./components/Edit\";\n\nconst App = () => {\n  const [info, setInfo] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      fullName: addFormData.fullName,\n      address: addFormData.address,\n      phoneNumber: addFormData.phoneNumber,\n      email: addFormData.email,\n    };\n\n    const newContacts = [...info, newContact];\n    setInfo(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n      address: editFormData.address,\n      phoneNumber: editFormData.phoneNumber,\n      email: editFormData.email,\n    };\n\n    const newContacts = [...info];\n\n    const index = info.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setInfo(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      address: contact.address,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...info];\n\n    const index = info.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setInfo(newContacts);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              {/* <th>Address</th> */}\n              <th>Phone Number</th>\n              <th>Email</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {info.map((contact) => (\n              <Fragment>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n\n      <h2>Add a Contact</h2>\n      <form onSubmit={handleAddFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"address\"\n          required=\"required\"\n          placeholder=\"Enter an addres...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"phoneNumber\"\n          required=\"required\"\n          unique = \"unique\"\n          placeholder=\"Enter a phone number...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          onChange={handleAddFormChange}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}